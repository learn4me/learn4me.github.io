/**
 * Created by zpl on 15-2-2.
 */
//angular.module('Editor', [,'ui.bootstrap', 'ui.router', 'ngCookies']);
angular.module('Editor', ['ui.bootstrap', 'ui.router', 'ngCookies','ngStorage','ui.ace','permission','ngDialog','ngResource','ngSanitize']);
var apiService = "http://api.learn4me.com";
var baseUrl = "/api";
var ssoUrl = "http://sso.learn4me.com/login.php?refer=";

/**
 * Created by zpl on 15-2-2.
 */
'use strict';

/**
 * Route configuration for the RDash module.
 */
angular.module('Editor').config(['$httpProvider','$stateProvider', '$urlRouterProvider',
    function($httpProvider,$stateProvider, $urlRouterProvider) {
        $httpProvider.defaults.timeout = 800;
        //interceptors
        $httpProvider.interceptors.push('httpInterceptor');
        // For unmatched routes
        $urlRouterProvider.otherwise('/show');

        // Application routes
        $stateProvider
            .state('login',{
                templateUrl: function (){
                    //TODO mock login
                    window.location.href = ssoUrl+window.location.href;
                }
            })
            .state('editor',{
                url:"/editor/:codeid/:stepid",
                templateUrl:'templates/editor.html',
                data: {
                    permissions: {
                        except: ['anonymous'],
                        redirectTo: 'login'
                    }
                }
            })
            .state('show', {
                url: '/show/:codeid/:stepid',
                templateUrl: 'templates/show.html'
            });
    }
]);

/**
 * Created by zpl on 15-3-23.
 */
'use strict';

/**
 * Route run for the RDash module.
 */
angular.module('Editor').run(['Permission','$cookies',function(Permission,$cookies){
    // Define anonymous role
    Permission.defineRole('anonymous', function () {
        // If the returned value is *truthy* then the user has the role, otherwise they don't
        if(($cookies.get("token"))==undefined) {
            return true;
        }
        return false;
    });
}])
;
/**
 * Created by zpl on 15-2-2.
 */
angular.module('Editor')
    .controller('EditorCtrl', ['PictureService','$timeout','$scope', '$cookieStore','$stateParams','$localStorage', 'MyCodeService','ngDialog','Images','SessionService','CodeAPIService',EditorCtrl]);

function EditorCtrl(PictureService,$timeout,$scope,$cookieStore,$stateParams,$localStorage,MyCodeService,ngDialog,Images,SessionService,CodeAPIService) {
    $scope.codeid = $stateParams.codeid;
    $scope.stepid = $stateParams.stepid;
    $scope.imageinfo = null;
    $scope.page={};
    $scope.page.toggle = true;
    $scope.page.show = false;
    $scope.page.status = 1;
    console.log($scope.codeid);
    console.log($scope.stepid);
    $scope.flag = {}
    $scope.flag.loged = false;
    $scope.code_show = {}
    $scope.code_show.show = false;
    $scope.code_show.image = "";
    $scope.code_show.msg = "正在准备中。。"

    if(SessionService.isLogin()== true) {
        $scope.flag.loged = true;
        $scope.user = SessionService.getUserinfo();
                $scope.user_avatar = PictureService.ConvertKey2Src($scope.user.avatar,40,40);

    }


    if($localStorage.addstepobj == null){
        $scope.step = {
            meta:{
                id:"",
                name:"",
                description:"",
                code_name:"test.py",
                work_dir:"/root",
                image_id:0,
                code_id:parseInt($scope.codeid)
            },
            cmds:[
                {Seq:1,Cmd:"",Args:"",Is_replace:1},
                {Seq:2,Cmd:"",Args:"",Is_replace:1},
                {Seq:3,Cmd:"",Args:"",Is_replace:1},
                {Seq:4,Cmd:"",Args:"",Is_replace:1}
            ]
        }
    }else{
        $scope.step = $localStorage.addstepobj;
    }
    //add code content
    $scope.step.code = {
        code_content :"",
        post_content:"",
        id:null
    };
    if($scope.codeid != undefined &&$scope.stepid != undefined ){
        MyCodeService.getMyCodeAllInfo($scope.codeid,$scope.stepid,function(data){
            if(data == null){

            }else{

                $scope.step = data;
                if($scope.editor){
                    $scope.editor.setCode($scope.step.code.post_content)
                }
                //add a button
                var newValue = $scope.getHeight()
                if((newValue-156) <450){
                    $(".redactor_editor").attr("style","height:450px !important")
                }else{
                    $(".redactor_editor").attr("style","height:"+(newValue-156)+"px !important")
                    $(".ace_editor").css("height",(newValue-156)+"px !important")
                    //$(".redactor_editor").css("max-height",(newValue-40)+"px !important")
                }
                if($scope.imageinfo == null){
                    var user = SessionService.getUserinfo()
                    Images.get({id: $scope.step.meta.image_id, action: 'name'}).$promise.then(function(data){
                        $scope.imageinfo =data
                        $scope.page.show = true;
                        //准备容器
                        $scope.code_show.image = data.ImageName+":"+data.Tag;
                        $scope.prepareImage();
                    });
                }else{
                            $scope.page.show = true;
                            //准备容器
                            $scope.code_show.image = data.ImageName+":"+data.Tag;
                            $scope.prepareImage();
                }
            }
        })
    }
    //init


    $scope.panes = [
        {title:$scope.step.meta.code_name,content:"templates/ace_editor.html",active:true},
        {title:"运行代码",content:"templates/run.html",active:false}
    ]
    ;
    $scope.redactorOptions = {
        buttons:['html', 'formatting', 'bold', 'italic', 'deleted',
            'unorderedlist', 'orderedlist', 'outdent', 'indent',
            'image', 'quote', 'link', 'alignment', 'horizontalrule'],
        lang:"zh_cn",
        minHeight:450
    };

    // Called when the editor is completely ready.

    //func
    //prepareImage

    $scope.prepareImage = function(){
        if ($scope.code_show.show || $scope.code_show.image == ""){
            return;
        }else{
            CodeAPIService.prepareImage($scope.code_show.image).
                then(function(data){
                    if(data.status == 3){
                        $scope.code_show.show = true;
                    }else if(data.status == 7){
                        setTimeout($scope.prepareImage,6000);
                    }else{
                        $scope.code_show.msg = "准备失败。！"
                    }
                },function(err){
                    $scope.code_show.msg = "准备失败。！";
                })
        }

    }
    $scope.getImageNameByID = function(id){
        //for (var i = $localStorage.myImages.length - 1; i >= 0; i--) {
        //    if($localStorage.myImages[i].ImageId == id){
        //        return $localStorage.myImages[i].ImageName+":"+$localStorage.myImages[i].Tag
        //    }
        //};
        if($scope.imageinfo != null){
            return $scope.imageinfo.ImageName +":"+$scope.imageinfo.Tag;
        }
        return null
    }
    $scope.getPostContent = function(){
        var content = "";
        //if($scope.editor && $scope.editor.instance && $scope.editor.instance.codemirror){
        //    content = $scope.editor.instance.codemirror.getValue();
        //}
        if($scope.editor){
            content = $scope.editor.getCode()
        }
        return content;

    }
    $scope.active = function(obj){

        $scope.panes.filter(function(pane){
            pane.active = false;
            if(obj == pane){
                pane.active = true;
            }
        })
    }
    var retry_times=0;
    var query_failed = false;
    var commit_ok = false;
    $scope.queryRunRes = function(){
        if(retry_times >3 || query_failed){
            $scope.writeConsole("run failed!pls try again");
            query_failed = true;
            return;
        }
        retry_times++;
        setTimeout(function(){
            MyCodeService.queryRunRes($scope.run_res.run_id,function(err,data){
                if(err != null){
                    $scope.writeConsole("some error happen");
                }else{
                    $scope.run_res.data = data;
                    if(data && data.status == 5){
                        //successful
                        $scope.parse_res(data.res);
                    }else{
                        setTimeout($scope.queryRunRes,3000);
                    }
                }
            })
        },3000);
    }
    $scope.parse_res = function(result){
        var lines = result.split('\r\n')
        for(var i=0;i<lines.length;i++){
            $scope.writeConsole(lines[i])
        }
    }
    $scope.coderun_func = function(){
        if(retry_times >3  || commit_ok){
            $scope.writeConsole("run failed!pls try again");
            commit_ok = false
            return;
        }
        retry_times++;
        if($scope.page.term){
            console.log($scope.step)
            $scope.writeConsole("running");
            var image = $scope.getImageNameByID($scope.step.meta.image_id)
            if(image == null){
                $scope.writeConsole("尚未准备好!请刷新重试");
                return;
            }
            MyCodeService.runCode(image,$scope.step,function(err,data){
                if(err == null){
                    $scope.run_res = {};
                    $scope.run_res.run_id = data.run_id;
                    $scope.parse_res(data.res);
                    if(data.status ==3){
                        retry_times = 0;
                        commit_ok = true;
                        query_failed = false;
                        $scope.queryRunRes();
                    }else if(data.status ==5){
                        commit_ok = true;
                        query_failed = true;
                        $scope.writeConsole("Task finished!");
                    }else if(data.status == 6) {
                        $scope.writeConsole(data.res);
                        commit_ok = true;
                    }else{
                        $scope.writeConsole("Will retry after 3s....!");
                        setTimeout($scope.coderun_func,3000);
                    }
                }else{
                    $scope.writeConsole("failed commit!")
                }
            })

        }
    }
    $scope.writeConsole = function(s){
        var header = '> '
        $scope.page.term.writeln(header+s);
    }
    $scope.coderun = function(){
        commit_ok = false
        retry_times = 0
        $scope.coderun_func()
    }
    $scope.switchIt = function(){
        $scope.toggleSidebar()
    }
    $scope.commit = function(){
        var content = $scope.getPostContent();
        if(content == ""){
            alert("请填写内容")
            return;
        }
        var post = {
            id:$scope.step.meta.id,
            code_content:$scope.step.code.code_content,
            post_content:content
        }
        $scope.page.show = false;
        MyCodeService.addMyContentStep($scope.codeid,$scope.stepid,post,function(data){
            if(data == null){
                $scope.page.status = 2;
                console.log('error')
            }else{
                $scope.page.status = 3;
                console.log('ok')
            }
        })
    }

    /**
    * Sidebar Toggle & Cookie Control
    */
    var mobileView = 5;

    $scope.getWidth = function() {
        return window.innerWidth;
    };
    $scope.getHeight = function(){
        return window.innerHeight;
    }
    $scope.$watch($scope.getHeight,function(newValue,oldValue){
        //$(".CodeMirror").attr("height",(newValue-40)+"px !important")
        if((newValue-156) <450){
            $(".redactor_editor").attr("style","height:450px !important")
        }else{
            $(".redactor_editor").attr("style","height:"+(newValue-156)+"px !important")
            $(".ace_editor").css("height",(newValue-156)+"px !important")
            //$(".redactor_editor").css("max-height",(newValue-40)+"px !important")
        }
    })
    $scope.$watch($scope.getWidth, function(newValue, oldValue) {

        if (newValue >= mobileView) {
                $scope.page.toggle = true;
        } else {
            $scope.page.toggle = false;
        }

    });

    $scope.toggleSidebar = function() {
        console.log($scope.page.toggle);
        $scope.page.toggle = !$scope.page.toggle;
        $scope.$apply();
    };
    window.onresize = function() {
        $scope.$apply();
    };

    $scope.aceLoaded = function(_editor){
        //option
        _editor.setFontSize(20);
    }
    $scope.logout = function(){
        SessionService.logout();
    }
}
/**
 * Created by zpl on 15-5-19.
 */
HeaderCtrl

angular
    .module('Editor')
    .controller('HeaderCtrl', ['PictureService','$scope','SessionService', HeaderCtrl]);

function HeaderCtrl(PictureService,$scope,SessionService){

    $scope.flag = {}
    $scope.flag.loged = false;
    if(SessionService.isLogin()== true) {
        $scope.flag.loged = true;
        $scope.user = SessionService.getUserinfo();
        $scope.user_avatar = PictureService.ConvertKey2Src($scope.user.avatar,40,40);

    }

}
/**
 * Created by zpl on 15-2-10.
 */
angular.module('Editor')
    .controller('ShowCtrl', ['PictureService','$timeout','$scope', '$cookieStore','$stateParams','$localStorage', 'MyCodeService','ngDialog', '$sce','Images','SessionService','CodeAPIService',ShowCtrl]);

function ShowCtrl(PictureService,$timeout,$scope,$cookieStore,$stateParams,$localStorage,MyCodeService,ngDialog,$sce,Images,SessionService,CodeAPIService){
    $scope.codeid = $stateParams.codeid;
    $scope.stepid = $stateParams.stepid;
    $scope.flag = {};
    $scope.page={};
    $scope.imageinfo = null;
    $scope.page.toggle = true;
    $scope.page.show = false;
    $scope.page.status = 1;
    $scope.page.pre = -1;
    $scope.page.pre = {
        index:-1,
        data:null
    }
    $scope.page.next = {
        index:-1,
        data:null,
    };

    $scope.code_show = {}
    $scope.code_show.show = false;
    $scope.code_show.image = "";
    $scope.code_show.msg = "正在准备中。。"

    console.log($scope.codeid);
    console.log($scope.stepid);

    if(SessionService.isLogin() == true){
        $scope.flag.loged = true;
        $scope.user = SessionService.getUserinfo();
        $scope.user_avatar = PictureService.ConvertKey2Src($scope.user.avatar,40,40);

    }else{
        $scope.flag.loged = false;
    }

    if($localStorage.codes == undefined || $localStorage.codes[$scope.codeid] == null){
            MyCodeService.getMyOneCodeFromBack($scope.codeid,function(data){
                if(data){
                    MyCodeService.getMyCodeStep($scope.codeid,function(data2){
                        if(data2){
                            $scope.info = $localStorage.codes[$scope.codeid]
                            for (var i = $scope.info.steps.length - 1; i >= 0; i--) {
                                if($scope.stepid ==$scope.info.steps[i].id){
                                    if(i+1 <$scope.info.steps.length ){
                                        $scope.page.next.index  = i+1
                                        $scope.page.next.data = $scope.info.steps[i+1]
                                    }
                                    if(i-1 >= 0){
                                        $scope.page.pre.index = i-1;
                                         $scope.page.pre.data = $scope.info.steps[i-1]
                                    }
                                    break;
                                }
                            };
                        }
                    })
                }
            })
    }else{
            $scope.info = $localStorage.codes[$scope.codeid]
            for (var i = $scope.info.steps.length - 1; i >= 0; i--) {
                        if($scope.stepid ==$scope.info.steps[i].id){
                            if(i+1 <$scope.info.steps.length ){
                                $scope.page.next.index  = i+1
                                $scope.page.next.data = $scope.info.steps[i+1]
                            }
                            if(i-1 >= 0){
                                $scope.page.pre.index = i-1;
                                 $scope.page.pre.data = $scope.info.steps[i-1]
                            }
                            break;
                        }
            };
    }
    if($localStorage.addstepobj == null){
        $scope.step = {
            meta:{
                id:"",
                name:"",
                description:"",
                code_name:"test.py",
                work_dir:"/root",
                image_id:0,
                code_id:parseInt($scope.codeid)
            },
            cmds:[
                {Seq:1,Cmd:"",Args:"",Is_replace:1},
                {Seq:2,Cmd:"",Args:"",Is_replace:1},
                {Seq:3,Cmd:"",Args:"",Is_replace:1},
                {Seq:4,Cmd:"",Args:"",Is_replace:1}
            ]
        }
    }else{
        $scope.step = $localStorage.addstepobj;
    }

    //add code content
    $scope.step.code = {
        code_content :"",
        post_content:"",
        id:null
    };
    $scope.panes = [
        {title:$scope.step.meta.code_name,content:"templates/ace_editor.html",active:true},
        {title:"运行代码",content:"templates/run.html",active:false}
    ]

    //init
    $scope.show={
        post_content :""
    }
    MyCodeService.getMyCodeAllInfo($scope.codeid,$scope.stepid,function(data){
        if(data == null){

        }else{
            var newValue = $scope.getHeight()
            if((newValue-173)<450){
                $(".CodeMirror").attr("style","height:450px !important")
                $("#ace_editor").css("height",(newValue-173)+"px !important")
            }else{
                $(".CodeMirror").attr("style","height:"+(newValue-172)+"px !important")
                $("#ace_editor").css("height",(newValue-172)+"px !important")
            }
            
            $scope.step = data;
            $scope.show.post_content = $sce.trustAsHtml(data.code.post_content)
            if($scope.imageinfo == null){
                //var user = SessionService.getUserinfo()
                Images.get({id: $scope.step.meta.image_id, action: 'name'}).$promise.then(function(data){
                    $scope.imageinfo =data
                    $scope.page.show = true;
                    //准备容器
                    $scope.code_show.image = data.ImageName+":"+data.Tag;
                    $scope.prepareImage();
                });
            }else{
                $scope.page.show = true;
                //准备容器
                $scope.code_show.image = data.ImageName+":"+data.Tag;
                $scope.prepareImage();
            }

        }
    })


    $scope.prepareImage = function(){
        if ($scope.code_show.show || $scope.code_show.image == ""){
            return;
        }else{
            CodeAPIService.prepareImage($scope.code_show.image).
                then(function(data){
                    if(data.status == 3){
                        $scope.code_show.show = true;
                    }else if(data.status == 7){
                        setTimeout($scope.prepareImage,6000);
                    }else{
                        $scope.code_show.msg = "准备失败。！"
                    }
                },function(err){
                    $scope.code_show.msg = "准备失败。！";
                })
        }

    }

    $scope.active = function(obj){

        $scope.panes.filter(function(pane){
            pane.active = false;
            if(obj == pane){
                pane.active = true;
            }
        })
    }

    var retry_times=0;
    var query_failed = false;
    var commit_ok = false;
    $scope.queryRunRes = function(){
        if(retry_times >3 || query_failed){
            $scope.writeConsole("run failed!pls try again");
            query_failed = true;
            return;
        }
        retry_times++;
        setTimeout(function(){
            MyCodeService.queryRunRes($scope.run_res.run_id,function(err,data){
                if(err != null){
                    $scope.writeConsole("some error happen");
                }else{
                    $scope.run_res.data = data;
                    if(data && data.status == 5){
                        //successful
                        $scope.parse_res(data.res);
                    }else{
                        setTimeout($scope.queryRunRes,3000);
                    }
                }
            })
        },3000);
    }
    $scope.parse_res = function(result){
        var lines = result.split('\n')
        for(var i=0;i<lines.length;i++){
            $scope.writeConsole(lines[i])
        }
    }
    $scope.coderun_func = function(){
        if(retry_times >3  || commit_ok){
            $scope.writeConsole("run failed!pls try again");
            commit_ok = false
            return;
        }
        retry_times++;
        if($scope.page.term){
            console.log($scope.step)
            $scope.writeConsole("running");
            var image = $scope.getImageNameByID($scope.step.meta.image_id);
            if(image == null){
                $scope.writeConsole("尚未准备好!请刷新重试");
                return;
            }
            MyCodeService.runCode(image,$scope.step,function(err,data){
                if(err == null){
                    $scope.run_res = {};
                    $scope.run_res.run_id = data.run_id;
                    $scope.parse_res(data.res);
                    if(data.status ==3){
                        retry_times = 0;
                        commit_ok = true;
                        query_failed = false;
                        $scope.queryRunRes();
                    }else if(data.status ==5){
                        commit_ok = true;
                        query_failed = true;
                        $scope.writeConsole("Task finished!");
                    }else if(data.status == 6) {
                        $scope.writeConsole(data.res);
                        commit_ok = true;
                    }else{
                        $scope.writeConsole("Will retry after 3s....!");
                        setTimeout($scope.coderun_func,3000);
                    }
                }else{
                    $scope.writeConsole("failed commit!")
                }
            })

        }
    }
    $scope.writeConsole = function(s){
        var header = '> '
        $scope.page.term.writeln(header+s);
    }
    $scope.coderun = function(){
        commit_ok = false
        retry_times = 0
        $scope.coderun_func()
    }
    $scope.switchIt = function(){
        $scope.toggleSidebar()
    }
    $scope.getImageNameByID = function(id){
        //for (var i = $localStorage.myImages.length - 1; i >= 0; i--) {
        //    if($localStorage.myImages[i].ImageId == id){
        //        return $localStorage.myImages[i].ImageName+":"+$localStorage.myImages[i].Tag
        //    }
        //};
        if($scope.imageinfo != null){
            return $scope.imageinfo.ImageName +":"+$scope.imageinfo.Tag;
        }
        return null
    }

    /**
     * Sidebar Toggle & Cookie Control
     */
    var mobileView = 580;
    $scope.getHeight = function(){
        return window.innerHeight;
    }
    $scope.$watch($scope.getHeight,function(newValue,oldValue){
        //$(".CodeMirror").attr("height",(newValue-40)+"px !important")
        if((newValue-173) <450){
            $(".CodeMirror").attr("style","height:450px !important")
        }else{
            $(".CodeMirror").attr("style","height:"+(newValue-173)+"px !important")
            //$(".redactor_editor").css("max-height",(newValue-40)+"px !important")
        }
    })
    $scope.getWidth = function() {
        return window.innerWidth;
    };

    $scope.$watch($scope.getWidth, function(newValue, oldValue) {
        if (newValue >= mobileView) {
            $scope.page.toggle = true;
        } else {
            $scope.page.toggle = false;
        }

    });

    $scope.toggleSidebar = function() {
        console.log($scope.page.toggle);
        $scope.page.toggle = !$scope.page.toggle;
        $scope.$apply();
    };
    window.onresize = function() {
        $scope.$apply();
    };
    $scope.aceLoaded = function(_editor){
        //option
        _editor.setFontSize(20);
    }
    $scope.logout = function(){
        SessionService.logout();
    }
}
/**
 * Created by zpl on 15-4-15.
 */
angular
    .module('Editor')
    .directive('consolelog', [consolelog]);
function consolelog(){
    return {
        restrict: 'E',
        scoep:{
            name:'@'
        },
        template:'<span>{{name}}<div class="term"></div></span>',
        link : function(scope, element, attrs) {
            var term = new Terminal({
                cols:80,
                rows:14
            });
            term.open(element.find("div")[0])
            term.write('welcome!\r\n')
            scope.page.term = term;
        }
    }
}
/**
 * Created by zpl on 15-4-13.
 */
angular
    .module('Editor')
    .directive('mdeditor', [md_editor]);
function md_editor(){
    return {
        restrict: 'EA',
        link : function(scope, element, attrs) {
            //element.wrapInner('<textarea class="md-text-editor">')
            var tmpssssss = document.getElementById('md-text-editor')
            var editor2 = new Editor({
                element:tmpssssss,
                toolbar:[
                    {name: 'switchit',className: 'ttt glyphicon glyphicon-arrow-left',action:scope.switchIt}
                ]
            })
            scope.editor.instance = editor2;

        }
    }
}
/**
 * Loading Directive
 * @see http://tobiasahlin.com/spinkit/
 */

angular
    .module('Editor')
    .directive('rdLoading', rdLoading);

function rdLoading() {
    var directive = {
        restrict: 'AE',
        template: '<div class="loading"><div class="double-bounce1"></div><div class="double-bounce2"></div></div>'
    };
    return directive;
};
/**
 * Created by zpl on 15-4-23.
 */

angular
    .module('Editor')
    .directive('redactor', ['$timeout', function($timeout) {
    return {
        restrict: 'A',
        require: 'ngModel',
        link: function(scope, element, attrs, ngModel) {

            // Expose scope var with loaded state of Redactor
            scope.redactorLoaded = false;

            var updateModel = function updateModel(value) {
                    // $timeout to avoid $digest collision
                    $timeout(function() {
                        scope.$apply(function() {
                            ngModel.$setViewValue(value);
                        });
                    });
                },
                options = {
                    changeCallback: updateModel,
                },
                additionalOptions = attrs.redactor ?
                    scope.$eval(attrs.redactor) : {},
                editor,
                $_element = angular.element(element);
            RELANG = new Array()
            RELANG['zh_cn'] =
            {
                html: 'HTML代码',
                video: '视频',
                image: '图片',
                table: '表格',
                link: '链接',
                link_insert: '插入链接',
                link_edit: 'Edit link',
                unlink: '取消链接',
                formatting: '样式',
                paragraph: '段落',
                quote: '引用',
                code: '代码',
                header1: '一级标题',
                header2: '二级标题',
                header3: '三级标题',
                header4: '四级标题',
                header5: 'Header 5',
                bold:  '粗体',
                italic: '斜体',
                fontcolor: '字体颜色',
                backcolor: '背景颜色',
                unorderedlist: '项目编号',
                orderedlist: '数字编号',
                outdent: '减少缩进',
                indent: '增加缩进',
                cancel: '取消',
                insert: '插入',
                save: '保存',
                _delete: '删除',
                insert_table: '插入表格',
                insert_row_above: '在上方插入',
                insert_row_below: '在下方插入',
                insert_column_left: '在左侧插入',
                insert_column_right: '在右侧插入',
                delete_column: '删除整列',
                delete_row: '删除整行',
                delete_table: '删除表格',
                rows: '行',
                columns: '列',
                add_head: '添加标题',
                delete_head: '删除标题',
                title: '标题',
                image_position: '位置',
                none: '无',
                left: '左',
                right: '右',
                image_web_link: '图片网页链接',
                text: '文本',
                mailto: '邮箱',
                web: '网址',
                video_html_code: '视频嵌入代码',
                file: '文件',
                upload: '上传',
                download: '下载',
                choose: '选择',
                or_choose: '或选择',
                drop_file_here: '将文件拖拽至此区域',
                align_left:	'左对齐',
                align_center: '居中',
                align_right: '右对齐',
                align_justify: '两端对齐',
                horizontalrule: '水平线',
                fullscreen: '全屏',
                deleted: '删除',
                anchor: '锚点',
                link_new_tab: 'Open link in new tab',
                underline: 'Underline',
                alignment: 'Alignment',
                filename: 'Name (optional)',
                edit: 'Edit',
                center: 'Center'
            };
            angular.extend(options, scope.redactorOptions, additionalOptions);
            // prevent collision with the constant values on ChangeCallback
            RedactorPlugins = {};

            RedactorPlugins.advanced = function()
            {
                return {
                    init: function()
                    {
                        var button = this.button.add('advanced', 'Advanced');

                        // make your added button as Font Awesome's icon
                        this.button.setAwesome('advanced', 'fa-tasks');

                        this.button.addCallback(button, this.advanced.testButton);
                    },
                    testButton: function(buttonName)
                    {
                        alert(buttonName);
                    }
                };
            };
            options.plugins = ['advanced'];

            var changeCallback = additionalOptions.changeCallback || scope.redactorOptions.changeCallback;
            if (changeCallback) {
                options.changeCallback = function(value) {
                    updateModel.call(this, value);
                    changeCallback.call(this, value);
                }
            }

            // put in timeout to avoid $digest collision.  call render() to
            // set the initial value.
            $timeout(function() {
                editor = $_element.redactor(options);
                scope.editor = $_element
                ngModel.$render();
            });

            ngModel.$render = function() {
                if(angular.isDefined(editor)) {
                    $timeout(function() {
                        $_element.redactor('code.set', ngModel.$viewValue || '');
                        $_element.redactor('placeholder.toggle');
                        scope.redactorLoaded = true;
                    });
                }
            };
        }
    };
}])
/**
 * Widget Body Directive
 */

angular
    .module('Editor')
    .directive('rdWidgetBody', rdWidgetBody);

function rdWidgetBody() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            loading: '@?',
            classes: '@?'
        },
        transclude: true,
        template: '<div class="widget-body" ng-class="classes"><rd-loading ng-show="loading"></rd-loading><div ng-hide="loading" class="widget-content" ng-transclude></div></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Footer Directive
 */

angular
    .module('Editor')
    .directive('rdWidgetFooter', rdWidgetFooter);

function rdWidgetFooter() {
    var directive = {
        requires: '^rdWidget',
        transclude: true,
        template: '<div class="widget-footer" ng-transclude></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Header Directive
 */

angular
    .module('Editor')
    .directive('rdWidgetHeader', rdWidgetTitle);

function rdWidgetTitle() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            title: '@',
            icon: '@'
        },
        transclude: true,
        template: '<div class="widget-header"><i class="fa" ng-class="icon"></i> {{title}} <div class="pull-right" ng-transclude></div></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Directive
 */

angular
    .module('Editor')
    .directive('rdWidget', rdWidget);

function rdWidget() {
    var directive = {
        transclude: true,
        template: '<div class="widget" ng-transclude></div>',
        restrict: 'EA'
    };
    return directive;

    function link(scope, element, attrs) {
        /* */
    }
};
/**
 * Created by zpl on 15-3-16.
 */
angular.module('Editor').
    factory('CodeAPIService',['$http','$q','RestfulService',function($http,$q,RestfulService){
        return {
            getCodesByUser: function(userid){
                return RestfulService.restfulOp({
                    url:baseUrl+"/user/code/"+userid,
                    method:"GET"
                });
            },
            getCodeById: function(id){
                return RestfulService.restfulOp({
                    url:baseUrl+"/code/"+id,
                    method:"GET"
                });
            },
            addCode2User: function(userid,codeinfo){
                return RestfulService.restfulOp({
                    url:baseUrl+"/user/code/"+userid,
                    method:"POST",
                    data:codeinfo
                });

            },
            updateCode:function(userid,codeinfo){
                return RestfulService.restfulOp({
                    url:baseUrl+"/code/"+userid+"/"+codeinfo.id,
                    method:"PUT",
                    data:codeinfo
                });

            },
            deleteCode:function(userid,codeid){
                return RestfulService.restfulOp({
                    url:baseUrl+"/code/"+userid+"/"+codeid,
                    method:"DELETE"
                });

            },
            getCodeSteps:function(codeid){
                return RestfulService.restfulOp({
                    url:baseUrl+"/code/"+codeid+"/step",
                    method:"GET"
                });
            },
            getCodeStepById: function(codeid,stepid){
                return RestfulService.restfulOp({
                    url:baseUrl+"/code/"+codeid+"/step/"+stepid,
                    method:"GET"
                });

            },
            addCodeStep: function(userid,codeid,codestep){
                return RestfulService.restfulOp({
                    url:baseUrl+"/code/"+userid+"/"+codeid+"/step",
                    method:"POST",
                    data:codestep
                });

            },
            updateCodeStepCmd: function(userid,codeid,stepid,data){
                return RestfulService.restfulOp({
                    url:baseUrl+"/code/"+userid+"/"+codeid+"/step/"+stepid+"/cmd",
                    method:"PUT",
                    data:data
                })
            },
            updateCodeStep: function(userid,codeid,stepid,codestep){
                return RestfulService.restfulOp({
                    url:baseUrl+"/code/"+userid+"/"+codeid+"/step/"+stepid,
                    method:"PUT",
                    data:codestep
                });

            },
            deleteCodeStep: function(userid,codeid,stepid){
                return RestfulService.restfulOp({
                    url:baseUrl+"/code/"+userid+"/"+codeid+"/step/"+stepid,
                    method:"DELETE"
                });

            },
            getCodeStepDetail: function(codeid,stepid){
                return RestfulService.restfulOp({
                    url:baseUrl+"/code/"+codeid+"/step/"+stepid+"/detail",
                    method:"GET"
                });
            },
            updateCodeStepDetail: function(userid,codeid,stepid,codestepdetail){
                return RestfulService.restfulOp({
                    url:baseUrl+"/code/"+userid+"/"+codeid+"/step/"+stepid+"/detail",
                    method:"PUT",
                    data:codestepdetail
                });

            },
            coderun: function(imageid,runinfo){
                return RestfulService.restfulOp({
                    url:baseUrl+"/coderun/"+imageid,
                    method:"PUT",
                    data:runinfo
                });

            },
            coderunRes: function(runid){
                return RestfulService.restfulOp({
                    url:baseUrl+"/coderun/"+runid,
                    method:"GET"
                });
            },
            prepareImage: function(image){
                return RestfulService.restfulOp({
                    url:baseUrl+"/prepare/"+image,
                    method:"GET"
                });
            }

        }
    }])
/**
 * Created by zpl on 15-3-22.
 * 拦截器
 */
angular.module('Editor').
    factory('httpInterceptor',['$q','$cookies', function($q,$cookies){
        var isNeedAuth=function(uri,method){
            //check url is contain api
            if(uri.indexOf('api')>0){
                if(uri.split('coderun')>1){
                    return false;
                }
                if(method == 'POST' || method== 'PUT' ||method=='DELETE'){
                    return true;
                }
            }
            return false;
        };
        var httpInterceptor = {
            request: function(config) {
                if(config.url.indexOf('api')>0){
                    config.url =apiService + config.url;
                }
                if (isNeedAuth(config.url,config.method)) {
                    if(($cookies.get("token"))==undefined) {
                        return $q.reject({status:401,error:'请登陆'});
                    }
                    config.headers['x-session-token'] = $cookies.get("token");
                }
                return config;
            },
            response : function(response) {
                return response;
            },
            responseError : function(response) {
                if (response.status == 401) {
                    alert('must login');
                    window.location.href = ssoUrl+window.location.href;
                    return $q.reject(response);
                } else if (response.status === 404) {
                    alert("404!");
                    return $q.reject(response);
                }
            },
            requestError : function(config){
                return $q.reject(config);
            }
        };
        return httpInterceptor;
    }
    ]);

angular.module('Editor')
    .factory('Images', ['$resource',function($resource) {
        return $resource(baseUrl+'/images/:id/:action', {id: '@id',action:'@action' }, {
            'query': { isArray: true, method: 'GET' },
            'get': { isArray: false, method: 'GET' }
        });
    }])
/**
 * Created by Administrator on 2015/4/21.
 */
angular.module('Editor')
    .factory('loginService',['User','$cookies','$window',function(User,$cookies,$window) {
        var verifyData = {
            App_id:null,
            App_key:null,
            Token:null
        }
        return {
            isLogin:function(){
                console.log('login service!')
                if(($cookies.get("token"))==undefined) {
                    $window.location.href = ssoUrl+window.location.href;
                }
            },
            login:function(){
                verifyData.Token = $cookies.get("token");
                User.login({action:'islogin'},verifyData,function(c){
                    if(!c.is_login) {
                        $window.location.href = "http://sso.peilong.me/html/baigoSSO/mypage/login.php?refer=http://image.peilong.me:9000";
                    }
                },function(err){
                    $window.location.href = "http://sso.peilong.me/html/baigoSSO/mypage/login.php?refer=http://image.peilong.me:9000";
                });
            }
        }
}])
/**
 * Created by zpl on 15-3-18.
 */
angular.module('Editor').
    factory('MyCodeService',['CodeAPIService','SessionService','$localStorage',function(CodeAPIService,SessionService,$localStorage){
        return {
            userid:null,
            mycode:null,
            setMyUserId : function(id){
                this.userid = id;
            },
            setMyCode : function(code){
                this.mycode = code;
            },
            checkUser : function(){
                if(this.userid == "" || this.userid == null){
                    var user = SessionService.getUserinfo();
                    this.userid = user.userid;
                }
            },
            getMyCodeFromBack : function(callback){
                this.checkUser();
              CodeAPIService.getCodesByUser(this.userid).
                  then(function(data){
                            if(data instanceof Array){
                                for (var i = data.length - 1; i >= 0; i--) {
                                    $localStorage.codes[data[i].id] = data[i]
                                };

                            }else{
                                $localStorage.codes[data.id] = data
                            }
                            callback(data);
                  },function(error){
                      this.mycode = null;
                      callback(null);
                  })
            },
            getMyOneCodeFromBack : function(codeid,callback){
                if($localStorage.codes == undefined || $localStorage.codes == null ||$localStorage.codes[codeid] == null){
                    CodeAPIService.getCodeById(codeid).
                        then(function(data){
                            if($localStorage.codes == undefined || $localStorage.codes == null){
                                $localStorage.codes ={};
                            }
                            $localStorage.codes[codeid] = data
                            callback(data);
                        },function(error){
                            console.log(error);
                            this.mycode = null;
                            callback(null);
                        })
                }else{
                    callback($localStorage.codes[codeid])
                }
            },
            getMyCodeFromCache : function(){
                return this.mycode;
            },
            getMyCode : function(callback){
                    this.getMyCodeFromBack(callback);
            },
            getCodeInfoById:function(codeid,callback){
                this.checkUser();
                this.getMyOneCodeFromBack(codeid,callback);
            },
            getMyCodeOneStep:function(codeid,stepid,callback){
                CodeAPIService.getCodeStepById(codeid,stepid).
                    then(function(data){
                        callback(data);
                    },function(error){
                        console.log(error);
                        callback(null);
                    })
            },
            getMyCodeStep: function(codeid,callback){
                CodeAPIService.getCodeSteps(codeid).
                    then(function(data){
                        this.mycode = data;
                        $localStorage.codes[codeid].steps = data
                        callback(this.mycode);
                    },function(error){
                        console.log(error);
                        this.mycode = null;
                        callback(null);
                    });
            },
            getMyCodeAllInfo: function(codeid,stepid,callback){
                CodeAPIService.getCodeStepDetail(codeid,stepid).
                    then(function(data){
                        callback(data);
                    },function(error){
                        console.log(error);
                        callback(null);
                    });
            },
            addMyCodeStep: function(codeid,codestep,callback){
                this.checkUser();
                if(typeof codestep.image_id == 'string'){
                    codestep.image_id = parseInt(codestep.image_id)
                }
                if(codestep.id != null && codestep.id != ""){
                    CodeAPIService.updateCodeStep(this.userid,codeid,codestep.id,codestep).
                        then(function(data){
                            callback(data);
                        },function(error){
                            console.log(error);
                            callback(null);
                        });
                }else{
                    codestep.id = null;
                    CodeAPIService.addCodeStep(this.userid,codeid,codestep).
                        then(function(data){
                            callback(data);
                        },function(error){
                            console.log(error);
                            callback(null);
                        });
                }

            },
            addMyCodeStepCmd: function(codeid,stepid,data,callback){
                this.checkUser();
                CodeAPIService.updateCodeStepCmd(this.userid,codeid,stepid,data).
                    then(function(d){
                        callback(d);
                    },function(error){
                        console.log(error);
                        callback(null);
                    })
            },
            addMyContentStep: function(codeid,stepid,data,callback){
                this.checkUser();
                CodeAPIService.updateCodeStepDetail(this.userid,codeid,stepid,data).
                    then(function(d){
                        callback(d);
                    },function(error){
                        console.log(error);
                        callback(null);
                    })
            },
            addCode2User:function(obj,cb){
                this.checkUser();
                CodeAPIService.addCode2User(this.userid,obj).then(function(data){
                    cb(data);
                },function(error){
                    cb(error);
                })
            },
            runCode:function(image,obj,cb){
                var data = {
                    code :obj.code.code_content,
                    meta: obj.meta,
                    cmds:obj.cmds
                }
                CodeAPIService.coderun(image,data).then(function(data){
                    cb(null,data);
                },function(error){
                    cb(error,null)
                })
            },
            queryRunRes:function(id,cb){
                CodeAPIService.coderunRes(id).then(function(data){
                    cb(null,data)
                },function(err){
                    cb(err,null)
                })
            }
        }
    }])
/**
 * Created by zpl on 15-6-1.
 * http://7xj4fk.com1.z0.glb.clouddn.com/FpvJ2udpgKgf5D8sne5Ia5DosbHo?imageView2/1/w/200/h/100
 */

angular.module('Editor')
    .factory('PictureService', [function(){
        return {
            ConvertKey2Src:function(key,h,w){
                if (key == "" || key==undefined){
                    key = "default.jpg"
                }
                return "http://7xj4fk.com1.z0.glb.clouddn.com/"+key+"?imageView2/1/"+"w/"+w+"/h/"+h;
            }
        }
    }])
/**
 * Created by zpl on 15-3-22.
 * http发射器
 */

angular.module('Editor').
    factory('RestfulService',['$http','$q',function($http,$q){
        return {
            restfulOp:function(config){
                return $http(
                    config
                ).then(function(response) {
                        console.log(response);
                        if(typeof response != 'object'){
                            return $q.reject({error:"server error"});
                        }
                        if (typeof response.data === 'object') {
                            var data = response.data;
                            if (data == null) {
                                return $q.reject(response.data);
                            } else {
                                // invalid response
                                return response.data;
                            }
                        } else {
                            // invalid response
                            return $q.reject(response.data);
                        }

                    }, function(response) {
                        // something went wrong
                        return $q.reject(response.data);
                    });
            }
        }
    }
    ]);

/**
 * Created by zpl on 15-3-22.
 * 专门存储token
 */
angular.module('Editor').
    factory('SessionService',['$localStorage','$cookies','User','$window', function($localStorage,$cookies,User,$window){
        return {
            getUserinfo: function(){
                this.login();
                var user ={
                    userid: $cookies.get("u_id"),
                    name:$cookies.get("u_name"),
                    avatar:$cookies.get("u_avatar")
                }
                //if(user == null){
                //    //TODO need login,mock login
                //    user = $localStorage.user;
                //}
                return user;
            },
            isLogin:function(){
                //if($localStorage.token)
                //    return true;
                //return false;
                if(($cookies.get("token"))==undefined) {
                    return false;
                }
                return true;
            },
            getToken:function(){
                return $cookies.get("token");
            },
            login:function(){
                console.log($cookies.get("token"))
                if(($cookies.get("token"))==undefined) {
                    alert("请先登陆")
                    $window.location.href = ssoUrl+window.location.href;
                    exit;
                }
            },
            logout:function(){
                $cookies.remove('token',{
                    domain:'.learn4me.com'
                });
                $cookies.remove('u_id',{
                    domain:'.learn4me.com'
                });
                $window.location.href = "/";
            }
        }
    }]);

/**
 * Created by Administrator on 2015/4/21.
 */
angular.module('Editor')
.factory('User', ['$resource',function($resource) {
        return $resource('/api/sso/:action',{},{
            'login':{isArray:false,method:'POST'},
            'logout':{isArray:false,method:'POST'}
        })
    }])